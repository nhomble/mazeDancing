#!/usr/bin/env python2

import math
import time
import sys

from consts import *

import rospy
from roslib import message

from nav_msgs.msg import Odometry

from sensor_msgs.msg import PointCloud2, PointField
import point_cloud2 as pc2

import cv2
import cv2.cv as cv
from std_msgs.msg import Float64, Int64, String
from std_msgs.msg import Float64MultiArray, MultiArrayLayout, MultiArrayDimension
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import SimpleCV
import numpy as np

class Sensor_Manager(object):
	def __init__(self):
		# need to init a node to subscribe 
		self._node = rospy.init_node(SENSOR_NODE)
		# ODOM things
		self._odom_subscriber = rospy.Subscriber(ODOM_SUB, Odometry, self.odom_callback)
		self.last_odom = None
		# PCL things
		self._pcl_subscriber = rospy.Subscriber(PCL_SUB, PointCloud2, self.pcl_callback)
		self.last_pcl = None

		# Images
		self.last_color_image = None
		self._color_subscriber = rospy.Subscriber(COLOR_SUB, Image, self.color_callback)
	
		# pubs
		self.full_pcl_pub = rospy.Publisher(PCL_FULL_IO, Float64MultiArray)
		self.variance_full_pub = rospy.Publisher(PCL_VARIANCE, Float64MultiArray)
		self.left_bias_pcl = rospy.Publisher(PCL_LEFT_IO, Float64MultiArray)
		self.right_bias_pcl = rospy.Publisher(PCL_RIGHT_IO, Float64MultiArray)
		self.middle_bias_pcl = rospy.Publisher(PCL_MIDDLE_IO, Float64MultiArray)

	def odom_callback(self, data):
		self.last_odom = data
	def pcl_callback(self, data):

		self.last_pcl = data
		width = self.last_pcl.width
		height = self.last_pcl.height
		middle = (PCL_X_MAX + PCL_X_MIN) / 2
		data_out = pc2.read_points(self.last_pcl, skip_nans=True)
		# front, left, right, full
		sums = [0, 0, 0, 0]
		nums = [0, 0, 0, 0]
		sq_sums = [0, 0, 0, 0]
		good_range = lambda point: True if point[1] > PCL_Y_MIN and point[1] < PCL_Y_MAX else False
		valids = [\
				lambda point: True if point[0] > PCL_X_MIN and point[0] < PCL_X_MAX and \
					good_range(point) else False,\
				lambda point: True if point[0] >= middle and\
					good_range(point) else False,\
				lambda point: True if point[0] <= middle and\
					good_range(point) else False\
			]
		# (x,y,_) are not what you think..
		# there is some translation going on
		data_out = list(data_out)
		_sq_sum = 0
		for points in data_out[::PCL_INTERVAL]:
			# rospy.loginfo(points)
			if valids[0](points):
				sums[0] += points[2]
				nums[0] += 1
				sq_sums[0] += math.pow(points[2], 2)
			if valids[1](points):
				sums[1] += points[2]
				nums[1] += 1
				sq_sums[0] += math.pow(points[2], 2)
			if valids[2](points):
				sums[2] += points[2]
				nums[2] += 1
				sq_sums[0] += math.pow(points[2], 2)
			sums[3] += points[2]
			nums[3] += 1
			sq_sums[3] += math.pow(points[2], 2)


		rospy.loginfo("processed points {} {} {} {}".format(nums[0], nums[1], nums[2], nums[3]))
		# no nums should be 0
		if nums[3] != 0:
			_avg = sums[3] / nums[3]
			_variance = (_sq_sum - (math.pow(_avg, 2)/nums[3]))/(nums[3]-1)
			self.full_pcl_pub.publish(_create_message_array(_avg, _variance, nums[3]))
		if nums[0] != 0:
			_avg = sums[0] / nums[0]
			_variance = (_sq_sum - (math.pow(_avg, 2)/nums[0]))/(nums[0]-1)
			self.middle_bias_pcl.publish(_create_message_array(_avg, _variance, nums[0]))
		if nums[1] != 0:
			_avg = sums[1] / nums[1]
			_variance = (_sq_sum - (math.pow(_avg, 2)/nums[1]))/(nums[1]-1)
			self.left_bias_pcl.publish(_create_message_array(_avg, _variance, nums[1]))
		if nums[2] != 0:
			_avg = sums[2] / nums[2]
			_variance = (_sq_sum - (math.pow(_avg, 2)/nums[2]))/(nums[2]-1)
			self.right_bias_pcl.publish(_create_message_array(_avg, _variance, nums[2]))

	def color_callback(self, data):
		self.last_color_image = data
	
def _create_message_array(avg, var, num):
	Float64MultiArray, MultiArrayLayout, MultiArrayDimension
	dim = MultiArrayDimension()
	dim.label = "average and variance"
	dim.size = 3
	dim.stride = 1 
	layout = MultiArrayLayout()
	layout.data_offset = 0
	layout.dim = [dim]
	message = Float64MultiArray()
	message.data = [avg, var, num]
	message.layout = layout
	return message
		
def main():
	manager = Sensor_Manager()
	while not rospy.is_shutdown():
		rospy.Rate(10).sleep()

if __name__ == "__main__":
	try:
		sys.exit(main())
	except rospy.ROSInterruptException:
		pass
