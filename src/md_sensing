#!/usr/bin/env python2

import math
import time
import sys

from consts import *

import rospy
import roslib; roslib.load_manifest('mazeDancing')
from roslib import message

from sensor_msgs.msg import LaserScan

from std_msgs.msg import Float64, Int64, String
from std_msgs.msg import Float64MultiArray, MultiArrayLayout, MultiArrayDimension

class Sensor_Manager(object):
	def __init__(self):
		# need to init a node to subscribe 
		self._node = rospy.init_node(SENSOR_NODE)
		self.scanner = rospy.Subscriber('/scan', LaserScan, self._scan_callback)
		self.spub = rospy.Publisher(SCAN_IO, Float64MultiArray)
	
	# condense the depth scan into lp partitions
	def _scan_callback(self, data):
		start_angle = data.angle_min
		end_angle = data.angle_max
		angle_increment = data.angle_increment
		curr_angle = end_angle

		# determine points we should skip
		skip_l = (abs(start_angle) - RAD_ANGLE) / angle_increment
		skip_r = (end_angle - RAD_ANGLE) / angle_increment
		skip_a = int((skip_l + skip_r) // 2)
		skip_a = skip_a if DO_REDUCE_ANGLE else 0

		curr_angle -= angle_increment * skip_a

		# L, M, R
		part = [0, 0, 0]
		num = [0, 0, 0]
		length = len(data.ranges)
		for d in data.ranges[skip_a:length-skip_a]:
			index = 2
			if curr_angle > MIDDLE_RANGE[0]:
				index = 1 if curr_angle < MIDDLE_RANGE[1] else 0
			num[index] += 1
			if not math.isnan(d):
				part[index] += d
			curr_angle -= angle_increment
		# fancy average
		ret = map(lambda s, n: s/n if n != 0 else 0, part, num)
		self.spub.publish(_create_message_array(ret))

def _create_message_array(arr):
	dim = MultiArrayDimension()
	dim.label = "{} data array".format(len(arr))
	dim.size = len(arr)
	dim.stride = 1 
	layout = MultiArrayLayout()
	layout.data_offset = 0
	layout.dim = [dim]
	message = Float64MultiArray()
	message.data = arr
	message.layout = layout
	return message
		
def main():
	manager = Sensor_Manager()
	while not rospy.is_shutdown():
		rospy.Rate(RATE).sleep()

if __name__ == "__main__":
	try:
		sys.exit(main())
	except rospy.ROSInterruptException:
		pass
