#!/usr/bin/env python2
import math
import time
import sys

from consts import *

import rospy
from roslib import message

from nav_msgs.msg import Odometry

from sensor_msgs.msg import PointCloud2, PointField
import point_cloud2 as pc2

import cv2
import cv2.cv as cv
from std_msgs.msg import Float64
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import SimpleCV
import numpy as np

class Sensor_Manager(object):
	def __init__(self):
		# need to init a node to subscribe 
		self._node = rospy.init_node(SENSOR_NODE)
		# ODOM things
		self._odom_subscriber = rospy.Subscriber(ODOM_SUB, Odometry, self.odom_callback)
		self.last_odom = None
		# PCL things
		self._pcl_subscriber = rospy.Subscriber(PCL_SUB, PointCloud2, self.pcl_callback)
		self.last_pcl = None

		# Images
		self.last_depth_image = None
		self.last_color_image = None
		self._depth_subscriber = rospy.Subscriber(DEPTH_SUB, Image, self.depth_callback)
		self._color_subscriber = rospy.Subscriber(COLOR_SUB, Image, self.color_callback)
	
		#pubs
		self._full_pcl_pub = rospy.Publisher(PCL_FULL_IO, Float64)
		self.left_bias_pcl = rospy.Publisher(PCL_LEFT_IO, Float64)
		self.right_bias_pcl = rospy.Publisher(PCL_RIGHT_IO, Float64)
		self.middle_bias_pcl = rospy.Publisher(PCL_MIDDLE_IO, Float64)

	# just save data in memory to call later on demand
	def odom_callback(self, data):
		self.last_odom = data
	def pcl_callback(self, data):
		self.last_pcl = data
		width = self.last_pcl.width
		height = self.last_pcl.height
		data_out = pc2.read_points(self.last_pcl, skip_nans=True)
		# front, left, right, full
		sums = [0, 0, 0, 0]
		nums = [0, 0, 0, 0]
		valids = [\
				lambda point: True if point[0] > width/3 and \
					point[0] < 2 * width/3 and point[1] > height/3 and point[2] < 2 * height/3 else False,\
				lambda point: True if point[0] <= width/2 else False,\
				lambda point: True if point[0] >= width/2 else False\
			]
		# TODO
		# (x,y,_) are not what you think..
		# there is some translation going on
		for points in data_out:
			rospy.loginfo(points)
			if valids[0](points):
				sums[0] += points[2]
				nums[0] += 1
			if valids[1](points):
				sums[1] += points[2]
				nums[1] += 1
			if valids[2](points):
				sums[2] += points[2]
				nums[2] += 1
			sums[3] += points[2]
			nums[3] += 1

		# no nums should be 0
		if nums[3] != 0:
			self._full_pcl_pub.publish(Float64(sums[3] / nums[3]))
		if nums[0] != 0:
			self.middle_bias_pcl.publish(Float64(sums[0] / nums[0]))
		if nums[1] != 0:
			self.left_bias_pcl.publish(Float64(sums[1] / nums[1]))
		if nums[2] != 0:
			self.right_bias_pcl.publish(Float64(sums[2] / num[2]))


	def depth_callback(self, data):
		self.last_depth_image = data
	def color_callback(self, data):
		self.last_color_image = data

'''
	# NOTE attempted to use odometry data to determine angle
	# but the calculations are surprisingly poor
	def curr_angle(self):
		if self.last_odom is None:
			return None, None
		orientation = self.last_odom.pose.pose.orientation
		lar = 2 * math.acos(orientation.w)
		lad = lar * 180 / math.pi
		return lar, lad
	
	# average ALL points in cloud
	def full_pcl(self):
		if self.last_pcl is None:
			return None
		width = self.last_pcl.width
		height = self.last_pcl.height
		data_out = pc2.read_points(self.last_pcl, skip_nans=True)
		return _process_pcl(data_out)

	# only look at a portion of the pcl depending on where I want to look
	def bias_pcl(self, direction):
		if self.last_pcl is None:
			return None
		width = self.last_pcl.width
		height = self.last_pcl.height
		validator = None
		# we want pcl focused in the middle, ignore surroundings
		if direction == Direction.FORWARD:
			validator = lambda point: True if point[0] > width/3 and \
			point[0] < 2 * width/3 and point[1] > height/3 and point[2] < 2 * height/3 else False

		elif direction == Direction.LEFT:
			validator = lambda point: True if point[0] <= width/2 else False
		elif direction == Direction.RIGHT:
			validator = lambda point: True if point[0] >= width/2 else False
		else:
			rospy.loginfo("you wanted pcl from behind?")
			return

		data_out = pc2.read_points(self.last_pcl, skip_nans=True)
		return _process_pcl(data_out, validator)

	# depracated
	# pcl takes care of the need to use /camera/depth/image
	def full_depth(self):
		if self.last_depth_image is None:
			return
		b = CvBridge()
		depth_image = b.imgmsg_to_cv(self.last_depth_image, '32FC1')
		depth_array = np.array(depth_image, dtype=np.float32)
		return None 
	def bias_depth(self, direction):
		if self.last_depth_image is None:
			return
		b = CvBridge()
		depth_image = b.imgmsg_to_cv(self.last_depth_image, '16UC1')
		depth = SimpleCV.Image(depth_image, cv2image=True)
		return None
# get depth from pcl if validator say the point is good
def _process_pcl(data, validator=lambda points: True):
	total = 0
	num = 0
	for point in data:
		if validator(point):
			total += point[2]
			num += 1
	result = total/num if num != 0 else None
	print(result)
	return result
'''

def main():
	manager = Sensor_Manager()
	while not rospy.is_shutdown():
		rospy.Rate(10).sleep()

if __name__ == "__main__":
	try:
		sys.exit(main())
	except rospy.ROSInterruptException:
		pass
