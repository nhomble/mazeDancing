#!/usr/bin/env python2

import time
import sys

# ROS specifoc
import rospy
from std_msgs.msg import String

# my modules
from Move_Manager  import *
from Dance import *

def fixed_path(move, speech):
	path = [Direction.LEFT]
	pub.publish("The path is")
	for p in path:
		time.sleep(1)
		pub.publish(Direction.to_string[p])
	do_dance(path, move)

def detect_path(speech):
	speech.publish("start interpreting dance")
	path = interpret_dance()
	print(path)
	speech.publish("I interpreted")
	for p in path:
		if p is not None:
			speech.publish(Direction.to_string[p])
	return path

# ROS loop
def main(move):
	speech = rospy.Publisher(SPEECH_IO, String)
	path = detect_path(speech)
	time.sleep(12)
	speech.publish("get into position")
	move.move(Direction.FORWARD)
	move.move(Direction.LEFT)
	move.move(Direction.FORWARD)
	move.move(Direction.FORWARD)
	
	speech.publish("check left")
	move.move(Direction.LEFT)
	speech.publish("left is blocked")
	
	speech.publish("check ahead")
	move.move(Direction.RIGHT)
	speech.publish("ahead is open")
	
	speech.publish("check right")
	move.move(Direction.RIGHT)
	speech.publish("right is blocked")

	speech.publish("follow right wall")
	move.move(Direction.LEFT)
	speech.publish("go forward")
	move.move(Direction.FORWARD)

	speech.publish("check left")
	move.move(Direction.LEFT)
	speech.publish("left is open")
	
	speech.publish("check ahead")
	move.move(Direction.RIGHT)
	speech.publish("ahead is blocked")
	
	speech.publish("check right")
	move.move(Direction.RIGHT)
	speech.publish("right is open")

	speech.publish("we are at a node")
	speech.publish("we should go left")
	move.move(Direction.RIGHT)
	move.move(Direction.RIGHT)
	move.move(Direction.FORWARD)

	speech.publish("we have reached goal")

if __name__ == "__main__":
	try:
		rospy.init_node('test_dance')
		move = Move_Manager()
		time.sleep(1)
		sys.exit(main(move))
	except rospy.ROSInterruptException:
		pass
